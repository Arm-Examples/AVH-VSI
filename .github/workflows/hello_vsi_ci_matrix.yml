name: Arm Virtual Hardware hello_vsi example matrix build for CI

on:
  workflow_dispatch:

  pull_request:
    branches: [main]
    paths:
      - hello_vsi/*
  push:
    branches: [main]
    paths:
     - hello_vsi/*

  schedule:
    - cron: '00 22 * * 0'

jobs:
  CI_test_run:
    strategy:
      matrix:

        compiler: [ 
          {name: AC6,  ext: axf}, 
          {name: GCC,  ext: elf} 
        ]
        
        target: [ 
          {type: Corstone_300,  model: FVP_Corstone_SSE-300,  board: mps3_board}, 
          {type: Corstone_310,  model: FVP_Corstone_SSE-310,  board: mps3_board}, 
          {type: Corstone_315,  model: FVP_Corstone_SSE-315,  board: mps4_board} 
        ]

        build: [ 
          {type: event},
          {type: noevent}, 
          {type: gated}
        ]

      max-parallel: 1

    runs-on: ubuntu-latest
    env: 
      PROJECT: "hello_vsi"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Setup Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
  
      - name: Activate vcpkg
        uses: ARM-software/cmsis-actions/vcpkg@v1

      - name: Activate Arm tool license
        uses: ARM-software/cmsis-actions/armlm@v1

      # ----------------------------------------------------------------
      # Build executable for a specific target compiler pair
      # ----------------------------------------------------------------
      - name: Build context ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}
        run: |
            echo "Building Arm Virtual Hardware ${{env.PROJECT}} example with ${{ matrix.compiler.name }} by using the build-type ${{ matrix.build.type }} and the target type ${{ matrix.target.type }}..."

            cbuild ${{env.PROJECT}}.csolution.yml --update-rte --packs --context \
                ${{env.PROJECT}}.${{ matrix.build.type }}+${{ matrix.target.type }} \
                --toolchain ${{ matrix.compiler.name }} -r \
                | tee ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}.build.log

        working-directory: ./${{env.PROJECT}}


      # ----------------------------------------------------------------
      # Execute the previous generated context on a model
      # ----------------------------------------------------------------
      - name: Execute context ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }} on ${{ matrix.target.model }}
        run: |
            echo " ${{ matrix.build.type }}_${{ matrix.target.model }} context build with ${{ matrix.compiler }}"

            ${{ matrix.target.model }} \
                -a ./out/${{env.PROJECT}}/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/${{env.PROJECT}}.${{ matrix.compiler.ext }} \
                -C ${{ matrix.target.board }}.v_path=./source/VSI/data_sensor/python/ \
                -f ${{ matrix.target.model }}.cfg \
                -C ${{ matrix.target.board }}.uart0.out_file=fvp_stdout_${{ matrix.build.type }}_${{ matrix.target.model }}_${{ matrix.compiler.name }}.simulation.log \
                --simlimit 60 --stat | tee ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}.avh.log

            echo "Checking output..."
            test "$(grep "FAIL: " ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}.avh.log | wc -l)" -eq 0

        working-directory: ./${{env.PROJECT}}

      # ----------------------------------------------------------------
      # Directory structure of the project folder
      # ----------------------------------------------------------------
      - name: Directory structure of ./${{env.PROJECT}} folder
        run: |
              echo "Diagnosis"
              tree ./${{env.PROJECT}}

      # ----------------------------------------------------------------
      # Upload build log
      # ----------------------------------------------------------------
      - name: Upload build log for context ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}.build.log
        uses: actions/upload-artifact@v4
        with:
            name: ${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}.build.log
            path: ./${{env.PROJECT}}/${{ matrix.build.type }}_${{ matrix.target.type }}_${{ matrix.compiler.name }}.build.log

      # ----------------------------------------------------------------
      # Upload FVP simulation results
      # ----------------------------------------------------------------
      - name: Upload FVP simulation results for context ${{ matrix.target.type }}_${{ matrix.compiler.name }}
        uses: actions/upload-artifact@v4
        with:
          name: fvp_stdout_${{ matrix.build.type }}_${{ matrix.target.model }}_${{ matrix.compiler.name }}.simulation.log
          path: ./${{env.PROJECT}}/fvp_stdout_${{ matrix.build.type }}_${{ matrix.target.model }}_${{ matrix.compiler.name }}.simulation.log

      # ----------------------------------------------------------------
      # Directory structure of ./out folder
      # ----------------------------------------------------------------
      - name: Directory structure of ./out folder
        run: |
              echo "Diagnosis"
              tree ./out
        working-directory: ./${{env.PROJECT}}
