name: Arm Virtual Hardware hello_vsi example matrix build
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '00 22 * * 0'

jobs:
  CI_test_run:
    strategy:
      # The data for the types have been taken from the section target-types in the hello_vsi.csolution.yml file
      matrix:
        os: ['windows-latest', 'ubuntu-latest']
        compiler: [ {name: AC6, ext: axf}, {name: GCC, ext: elf} ]
        target: [ 
         {type: Corstone_300,  device: SSE-300-MPS3,      model: FVP_Corstone_SSE-300, board: mps3_board}, 
         {type: Corstone_310,  device: SSE-310-MPS3_FVP,  model: FVP_Corstone_SSE-310, board: mps3_board}, 
         {type: Corstone_315,  device: SSE-315-FVP,       model: FVP_Corstone_SSE-315, board: mps4_board} 
         ]

      max-parallel: 1

    runs-on: [ "${{ matrix.os }}" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Setup Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install xterm on Ubuntu
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt-get install -y xterm
  
      - name: Install xvfb Virtual Framebuffer on Ubuntu # Needed for xterm
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt install -y xvfb
  
      - name: Activate vcpkg
        uses: ARM-software/cmsis-actions/vcpkg@v1

      - name: Activate Arm tool license
        uses: ARM-software/cmsis-actions/armlm@v1

      # ----------------------------------------------------------------
      # Experimental:Get list of contexts
      # ----------------------------------------------------------------
      - name: Get list of contexts
        if: startsWith(matrix.os,'ubuntu')
        run: |
          echo "Commandline to get the contexts"
          csolution list contexts hello_vsi.csolution.yml
          echo "Save the list to a variable"
          list_of_contexts="$(csolution list contexts hello_vsi.csolution.yml)"
          echo "Variable content: $list_of_contexts"

          echo "LIST_OF_CONTEXTS_VAR<<EOF" >> $GITHUB_ENV
          echo $(csolution list contexts hello_vsi.csolution.yml) >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        working-directory: ./hello_vsi

      - name: Show list of contexts
        if: startsWith(matrix.os,'ubuntu')      
        run: |
          echo ${{ env.LIST_OF_CONTEXTS_VAR }}
        working-directory: ./hello_vsi

      # ----------------------------------------------------------------
      # Build executable for a specific target compiler pair
      # ----------------------------------------------------------------
      - name: Build context ubuntu ${{ matrix.target.type }}_${{ matrix.compiler.name }}
        if: startsWith(matrix.os,'ubuntu')      
        run: |
            echo "Building Arm Virtual Hardware hello_vsi example with ${{ matrix.compiler.name }} by using the context ${{ matrix.target.type }}..."

            cbuild hello_vsi.csolution.yml --update-rte --packs --context \
                hello_vsi.event+${{ matrix.target.type }} \
                --toolchain ${{ matrix.compiler.name }} -r \
                | tee ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.build.log

        working-directory: ./hello_vsi
        continue-on-error: true

      - name: Build context windows ${{ matrix.target.type }}_${{ matrix.compiler.name }}
        if: startsWith(matrix.os,'windows')
        run: |
            echo "Building Arm Virtual Hardware hello_vsi example with ${{ matrix.compiler.name }} by using the context ${{ matrix.target.type }}..."

            cbuild hello_vsi.csolution.yml --update-rte --packs --context `
                hello_vsi.event+${{ matrix.target.type }} `
                --toolchain ${{ matrix.compiler.name }} -r `
                | tee ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.build.log

        working-directory: ./hello_vsi
        continue-on-error: true


      # ----------------------------------------------------------------
      # Execute the previous generated context on a model
      # ----------------------------------------------------------------
      - name: Execute context ubuntu ${{ matrix.target.type }}_${{ matrix.compiler.name }} on ${{ matrix.target.model }}
        if: startsWith(matrix.os,'ubuntu')      
        run: |
            echo " ${{ matrix.target.model }} context build with ${{ matrix.compiler }}"

            ${{ matrix.target.model }} \
                -a ./out/hello_vsi/${{ matrix.target.type }}/event/${{ matrix.compiler.name }}/hello_vsi.${{ matrix.compiler.ext }} \
                -C ${{ matrix.target.board }}.v_path=./source/VSI/data_sensor/python/ \
                -f ${{ matrix.target.model }}.cfg \
                -C ${{ matrix.target.board }}.uart0.out_file=fvp_stdout_${{ matrix.target.model }}_${{ matrix.compiler.name }}.${{ matrix.os }}.simulation.log \
                --simlimit 60 --stat | tee ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.avh.log

            echo "Checking output..."
            test "$(grep "FAIL: " ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.avh.log | wc -l)" -eq 0

        working-directory: ./hello_vsi
        continue-on-error: true

      - name: Execute context windows ${{ matrix.target.type }}_${{ matrix.compiler.name }} on ${{ matrix.target.model }}
        if: startsWith(matrix.os,'windows')      
        run: |
            echo " ${{ matrix.target.model }} context build with ${{ matrix.compiler }}"

            ${{ matrix.target.model }} `
                -a ./out/hello_vsi/${{ matrix.target.type }}/event/${{ matrix.compiler.name }}/hello_vsi.${{ matrix.compiler.ext }} `
                -C ${{ matrix.target.board }}.v_path=./source/VSI/data_sensor/python/ `
                -f ${{ matrix.target.model }}.cfg `
                -C ${{ matrix.target.board }}.uart0.out_file=fvp_stdout_${{ matrix.target.model }}_${{ matrix.compiler.name }}.${{ matrix.os }}.simulation.log `
                --simlimit 60 --stat | tee ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.avh.log

            echo "Checking output..."
            test "$(grep "FAIL: " ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.avh.log | wc -l)" -eq 0

        working-directory: ./hello_vsi
        continue-on-error: true


      # ----------------------------------------------------------------
      # Directory structure of ./hello_vsi folder
      # ----------------------------------------------------------------
      - name: Directory structure of ./hello_vsi folder
        run: |
              echo "Diagnosis"
              tree ./hello_vsi
        continue-on-error: true

      # ----------------------------------------------------------------
      # Upload build log
      # ----------------------------------------------------------------
      - name: Upload build log for context ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.build.log
        uses: actions/upload-artifact@v4
        with:
            name: ${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.build.log
            path: ./hello_vsi/${{ matrix.target.type }}_${{ matrix.compiler.name }}.${{ matrix.os }}.build.log

      # ----------------------------------------------------------------
      # Upload FVP simulation results
      # ----------------------------------------------------------------
      - name: Upload FVP simulation results for context ${{ matrix.target.type }}_${{ matrix.compiler.name }}_on_${{ matrix.os }} 
        uses: actions/upload-artifact@v4
        with:
          name: fvp_stdout_${{ matrix.target.model }}_${{ matrix.compiler.name }}.${{ matrix.os }}.simulation.log
          path: ./hello_vsi/fvp_stdout_${{ matrix.target.model }}_${{ matrix.compiler.name }}.${{ matrix.os }}.simulation.log

      # ----------------------------------------------------------------
      # Directory structure of ./out folder
      # ----------------------------------------------------------------
      - name: Directory structure of ./out folder
        run: |
              echo "Diagnosis"
              tree ./out
        working-directory: ./hello_vsi
        continue-on-error: true